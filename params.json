{"name":"Jsonix","tagline":"","body":"# Jsonix\r\n\r\n* Jsonix (JSON interfaces for XML) is a JavaScript library which allows you to convert between XML and JSON structures.\r\n* With Jsonix you can parse XML into JSON (this process is called _unmarshalling_) or serialize JSON in XML form (this is called _marshalling_).\r\n* These conversions are based on declarative XML/JSON mappings which can be written manually or generated from an XML Schema.\r\n\r\nJsonix advantages:\r\n\r\n* Strongly structured.\r\n* Type-safe.\r\n* (Optionally) XML Schema-driven.\r\n\r\n## Example\r\n\r\nHere's a working example for the [purchase order schema](http://www.w3.org/TR/xmlschema-0/#po.xsd) (try it [online in JSFiddle](http://jsfiddle.net/lexi/LP3DC/)).\r\n\r\n### Generate mappings\r\n\r\n```\r\njava -jar jsonix-full.jar -d mappings -p PO purchaseorder.xsd\r\n```\r\n\r\nGenerates mappings for the `purchaseorder.xsd` schema in the `mappings\\PO.js`; mappings will be placed in the variable `PO`.\r\n\r\n### Unmarshalling:\r\n\r\n```javascript\r\n// Include or require PO.js so that PO variable is available\r\n// For instance, in node.js:\r\nvar PO = require('./mappings/PO').PO;\r\n\r\n// First we construct a Jsonix context - a factory for unmarshaller (parser)\r\n// and marshaller (serializer)\r\nvar context = new Jsonix.Context([PO]);\r\n\r\n// Then we create a unmarshaller\r\nvar unmarshaller = context.createUnmarshaller();\r\n\r\n// Unmarshal an object from the XML retrieved from the URL\r\nunmarshaller.unmarshalURL('po.xml',\r\n    // This callback function will be provided with the result of the unmarshalling\r\n    function (unmarshalled) {\r\n        console.log(unmarshalled.value.shipTo.name); // Alice Smith\r\n        console.log(unmarshalled.value.items.item[1].productName); // Baby Monitor\r\n    });\r\n```\r\n\r\nYou can also ``unmarshalString``, ``unmarshalDocument`` and (under node.js) ``unmarshalFile``.\r\n    \r\n### Marshalling\r\n\r\n```javascript\r\n// Create a marshaller\r\nvar marshaller = context.createMarshaller();\r\n\r\n// Marshal a JavaScript Object as XML (DOM Document)\r\nvar doc = marshaller.marshalDocument({\r\n    name: {\r\n        localPart: \"purchaseOrder\"\r\n    },\r\n    value: {\r\n        orderDate: { year: 1999, month: 10, day: 20 },\r\n        shipTo: {\r\n            country: \"US\",\r\n            name: \"Alice Smith\",\r\n            street: \"123 Maple Street\",\r\n            city: \"Mill Valley\",\r\n            state: \"CA\",\r\n            zip: 90952\r\n        },\r\n        billTo: { /* ... */ },\r\n        comment: 'Hurry, my lawn is going wild!',\r\n        items: { /* ... */ }\r\n    }\r\n});\r\n```\r\n\r\nYou can also ``marshalString``.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}